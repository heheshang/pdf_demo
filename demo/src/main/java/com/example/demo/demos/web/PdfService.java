package com.example.demo.demos.web;import com.itextpdf.text.BaseColor;import com.itextpdf.text.DocumentException;import com.itextpdf.text.Element;import com.itextpdf.text.Rectangle;import com.itextpdf.text.pdf.*;import com.openhtmltopdf.outputdevice.helper.BaseRendererBuilder;import com.openhtmltopdf.pdfboxout.PdfRendererBuilder;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.core.io.ClassPathResource;import org.springframework.stereotype.Service;import org.thymeleaf.TemplateEngine;import org.thymeleaf.context.Context;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.ArrayList;import java.util.List;import java.util.Locale;import java.util.Map;@Servicepublic class PdfService {    @Autowired    private TemplateEngine templateEngine;    public byte[] generatePdfWithWatermark(Map<String, Object> data) throws IOException, DocumentException {        // 生成基础 PDF        ByteArrayOutputStream pdfStream = new ByteArrayOutputStream();        generateBasePdf(data, pdfStream);        // 添加水印        return addWatermark(pdfStream.toByteArray());    }    private void generateBasePdf(Map<String, Object> data, OutputStream outputStream) {        Context context = new Context(Locale.CHINA);        context.setVariable("customerName", "张三");        context.setVariable("date", "2023-10-01");        List<Item> items = new ArrayList<>();        items.add(new Item(1, "商品A", 2, 10.0, 20.0));        items.add(new Item(2, "商品B", 1, 15.0, 15.0));        context.setVariable("items", items);        try {            String html = templateEngine.process("test1", context);            PdfRendererBuilder builder = new PdfRendererBuilder();            ClassPathResource resource = new ClassPathResource("fonts/SimHei.ttf");            builder.useFont(resource.getFile(), "simhei", 400, BaseRendererBuilder.FontStyle.NORMAL, true);            builder.useFastMode();//            builder.useFont((FSSupplier<InputStream>) fontChinese, "chinese");            builder.withHtmlContent(html, null);            builder.toStream(outputStream);            builder.run();        } catch (Exception e) {            throw new RuntimeException("PDF生成失败", e);        }    }    private byte[] addWatermark(byte[] pdfBytes) throws IOException, DocumentException {        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();        PdfReader reader = new PdfReader(pdfBytes);        PdfStamper stamper = new PdfStamper(reader, outputStream);        // 水印配置//        BaseFont baseFont = BaseFont.createFont("simsun", "utf-8", false);        BaseFont baseFont = BaseFont.createFont();        PdfGState gs = new PdfGState();        gs.setFillOpacity(0.3f);        // 逐页添加水印        for (int i = 1; i <= reader.getNumberOfPages(); i++) {            PdfContentByte content = stamper.getOverContent(i);            content.beginText();            content.setGState(gs);            content.setFontAndSize(baseFont, 48);            content.setColorFill(BaseColor.LIGHT_GRAY);            // 水印位置计算            Rectangle pageSize = reader.getPageSize(i);            float x = pageSize.getWidth() / 2;            float y = pageSize.getHeight() / 2;            content.showTextAligned(Element.ALIGN_CENTER, "CONFIDENTIAL", x, y, 45);            content.endText();        }        stamper.close();        reader.close();        return outputStream.toByteArray();    }    static class Item {        private int id;        private String name;        private int quantity;        private double price;        private double totalPrice;        public Item(int id, String name, int quantity, double price, double totalPrice) {            this.id = id;            this.name = name;            this.quantity = quantity;            this.price = price;            this.totalPrice = totalPrice;        }        // Getters and setters        public int getId() {            return id;        }        public void setId(int id) {            this.id = id;        }        public String getName() {            return name;        }        public void setName(String name) {            this.name = name;        }        public int getQuantity() {            return quantity;        }        public void setQuantity(int quantity) {            this.quantity = quantity;        }        public double getPrice() {            return price;        }        public void setPrice(double price) {            this.price = price;        }        public double getTotalPrice() {            return totalPrice;        }        public void setTotalPrice(double totalPrice) {            this.totalPrice = totalPrice;        }    }}